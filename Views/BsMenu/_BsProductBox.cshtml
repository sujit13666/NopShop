@model BsProductOverviewModel
@using Nop.Plugin.Other.BsMenu.Models
@using Nop.Core
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Core.Infrastructure
@using Nop.Web.Extensions
@using Nop.Web.Models.Catalog;

@helper Text_Truncate(string input, int length) 
{
    if(input.Length<= length)
    {
       @Html.Raw(@input)
    }
    else
    {
        @Html.Raw(@input.Substring(0,length))<text>...</text>
    }


}


@{
    //prepare "Add to cart" AJAX link
    string addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, });
    }    
}
<div class="bs-product-item" data-productid="@Model.Id">
    <div class="bs-single-product">
        <div class="bs-product-picture-box">
            <div class="bs-picture">
                @*<a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">*@
                <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.PictureLink" title="@Model.DefaultPictureModel.Title" />
                @*</a>*@
            </div>
            <div class="bs-product-item-footer">
                @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice)|| Model.ProductPrice.DisplayTaxShippingInfo)
                {
                    <div class="bs-prices">
                        <span class="bs-price bs-actual-price">@Model.ProductPrice.Price</span>                    

                        @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                        {
                            <span class="bs-price bs-old-price">@Model.ProductPrice.OldPrice</span>
                        }
								
                    
                        @if (Model.ProductPrice.DisplayTaxShippingInfo)
                        {
                            var inclTax = EngineContext.Current.Resolve<IWorkContext>().TaxDisplayType == TaxDisplayType.IncludingTax;
                            //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                            //of course, you can modify appropriate locales to include VAT info there
                            <div class="bs-tax-shipping-info">
                                @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                            </div>
                        }
                    </div>

                }else
                {
                    <div class="bs-new-prices">
								
                        <span class="bs-price bs-actual-price">@Model.ProductPrice.Price</span>
                    </div>
                }
                <h5 class="bs-product-title">
                    @Text_Truncate(Model.Name, 30)
                </h5>

            </div>
        

        </div>

        <div class="bs-product-overlay">
            <div class="bs-middle-content">
            <h5 class="bs-middle-product-title">
                @Text_Truncate(Model.Name, 30)
            </h5>

            @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice)|| Model.ProductPrice.DisplayTaxShippingInfo)
            {
                <div class="bs-middle-prices">
                    <span class="bs-price bs-actual-price">@Model.ProductPrice.Price</span>                    

                    @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                    {
                        <span class="bs-price bs-old-price">@Model.ProductPrice.OldPrice</span>
                    }
								
                    
                    @if (Model.ProductPrice.DisplayTaxShippingInfo)
                    {
                        var inclTax = EngineContext.Current.Resolve<IWorkContext>().TaxDisplayType == TaxDisplayType.IncludingTax;
                        //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                        //of course, you can modify appropriate locales to include VAT info there
                        <div class="bs-tax-shipping-info">
                            @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                        </div>
                    }
                </div>

            }else
            {
                <div class="bs-middle-new-prices">
								
                    <span class="bs-price bs-actual-price">@Model.ProductPrice.Price</span>
                </div>
            }

            @if(Model.ReviewOverviewModel.AllowCustomerReviews)
            {
                int ratingPercent = 0;
                if(Model.ReviewOverviewModel.TotalReviews != 0)
                {
                    ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
                }
                <div class="bs-middle-product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                    <div class="rating">
                        <div style="width: @(ratingPercent)%">
                        </div>
                    </div>
                </div>
            }
            <div class="bs-middle-description">
                @if(!String.IsNullOrEmpty(Model.ShortDescription))
                {
                    @Text_Truncate(Model.ShortDescription, 90)
                }
            
                @*@Html.Raw(Model.ShortDescription)*@
            </div>
        
            
				
            

				
            <div class="bs-middle-buttons">
                @*<input type="button" value="@T("Products.Details")" class="button-1 product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />*@
                @if (!Model.ProductPrice.DisableBuyButton)
                {
                    <button data-product-image="@Model.PictureLink" data-product-name="@Model.Name" class="btn btn-default bs-add-to-cart-button" title="@(Model.ProductPrice.AvailableForPreOrder ? T("ShoppingCart.PreOrder") : T("ShoppingCart.AddToCart"))" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink    ');return false;"><i class="fa fa-shopping-cart fa-2x"></i></button>
                    
                    
                @*<input title="@(Model.ProductPrice.AvailableForPreOrder ? T("ShoppingCart.PreOrder") : T("ShoppingCart.AddToCart"))" type="button" class="btn btn-sm btn-default" value="<i></i>" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink    ');return false;" />*@
                }
                <button   data-product-id="@Model.Id" class="btn btn-default bs-quick-view-button"><i class="fa fa-search-plus fa-2x"></i></button>
            </div>

            
            
        

        </div>
        </div>        
    </div>
    
</div>
<div class="clearfix space15px"></div>


